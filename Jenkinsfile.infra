// üöÄ Add input parameter to Jenkins job
properties([
  parameters([
    string(name: 'VERSION_TAG', defaultValue: 'v1.0-blue', description: 'Enter Docker image version tag (e.g., v1.1-green)')
  ])
])

pipeline {
  agent any

  environment {
    TF_DIR       = 'terraform'
    AWS_REGION   = 'us-east-1'
    ECR_URL      = '921483785411.dkr.ecr.us-east-1.amazonaws.com'
    APP_NAME     = 'vin-notes-app'
    FULL_IMAGE   = "${ECR_URL}/${APP_NAME}:${VERSION_TAG}"
  }

  stages {
    stage('Checkout Code') {
      steps {
        git branch: 'main', url: 'https://github.com/Vin22-03/E-commerce-CICD.git'
      }
    }

    stage('Terraform Init') {
      steps {
        dir("${env.TF_DIR}") {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']
          ]) {
            sh 'terraform init -migrate-state'
          }
        }
      }
    }

    stage('Terraform Validate') {
      steps {
        dir("${env.TF_DIR}") {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']
          ]) {
            sh 'terraform validate'
          }
        }
      }
    }

    stage('Terraform Plan') {
      steps {
        dir("${env.TF_DIR}") {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']
          ]) {
            sh 'terraform plan -out=tfplan'
            sh 'terraform plan -var-file=terraform.tfvars -out=tfplan'
            sh 'terraform apply -var-file=terraform.tfvars -auto-approve tfplan'
 
          }
        }
      }
    }

    stage('Terraform Apply') {
      steps {
        dir("${env.TF_DIR}") {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']
          ]) {
            sh 'terraform apply -auto-approve tfplan'
          }
        }
      }
    }

    stage('Docker Build & Push') {
      steps {
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']
        ]) {
          sh '''
            echo "üõ†Ô∏è Building Docker Image: $FULL_IMAGE"
            docker build -t $FULL_IMAGE .

            echo "üîê Logging in to ECR"
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URL

            echo "üì¶ Pushing Image to ECR"
            docker push $FULL_IMAGE
          '''
        }
      }
    }
  }

  post {
    failure {
      echo '‚ùå Deployment pipeline failed!'
    }
    success {
      echo "‚úÖ Docker Image pushed as: ${env.FULL_IMAGE}"
    }
  }
}
