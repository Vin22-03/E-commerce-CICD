properties([
  parameters([
    string(name: 'VERSION_TAG', defaultValue: 'v1.0-blue', description: 'Enter Docker image version tag (e.g., v1.1-green)')
  ])
])

pipeline {
  agent any

  environment {
    TF_DIR        = 'terraform'
    AWS_REGION    = 'us-east-1'
    AWS_ACCOUNT   = '921483785411'
    ECR_URL       = "${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com"
    BACKEND_APP   = 'vin-notes-app'
    FRONTEND_APP  = 'frontend'
  }

  stages {
    stage('Checkout Code') {
      steps {
        git branch: 'main', url: 'https://github.com/Vin22-03/E-commerce-CICD.git'
      }
    }

    stage('Terraform Init/Plan/Apply') {
      steps {
        dir("${env.TF_DIR}") {
          withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']]) {
            sh '''
              echo "‚öôÔ∏è Initializing Terraform"
              terraform init -reconfigure

              echo "‚úÖ Validating Terraform"
              terraform validate

              echo "üìã Planning Infrastructure"
              terraform plan -var-file=terraform.tfvars -out=tfplan

              echo "üöÄ Applying Infrastructure"
              terraform apply -auto-approve tfplan
            '''
          }
        }
      }
    }

    stage('Build & Push Backend Image') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']]) {
          sh '''
            BACKEND_IMAGE=$ECR_URL/$BACKEND_APP:${VERSION_TAG}
            echo "üõ†Ô∏è Building Backend Image: $BACKEND_IMAGE"
            docker build -t $BACKEND_IMAGE ./backend

            echo "üîê Logging in to ECR"
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URL

            echo "‚¨ÜÔ∏è Pushing Backend Image"
            docker push $BACKEND_IMAGE
          '''
        }
      }
    }

    stage('Build & Push Frontend Image') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']]) {
          sh '''
            FRONTEND_IMAGE=$ECR_URL/$FRONTEND_APP:${VERSION_TAG}
            echo "üé® Building Frontend Image: $FRONTEND_IMAGE"
            docker build -t $FRONTEND_IMAGE ./frontend

            echo "‚¨ÜÔ∏è Pushing Frontend Image"
            docker push $FRONTEND_IMAGE
          '''
        }
      }
    }
  }

  post {
    success {
      echo "‚úÖ Pipeline succeeded!"
      echo "üì¶ Backend Image: ${ECR_URL}/${BACKEND_APP}:${VERSION_TAG}"
      echo "üé® Frontend Image: ${ECR_URL}/${FRONTEND_APP}:${VERSION_TAG}"
    }
    failure {
      echo "‚ùå Pipeline failed! Check logs."
    }
  }
}
